{{#if access}}
    <div class="comment container small">
        <hr />

        <h3 class="cove-heading">
            Comments <span id="cove-count"></span>
        </h3>

        {{^if @member}}
            <p class="cove-sign-in"><a href="#/portal/signup">Sign in or become a "{{@site.title}}" member</a> to join the conversation.<br>
        {{/if}}

        <div id="cove"></div>

        {{#if @member}}
            <p class="cove-signed-in">Signed in as {{@member.email}} Â· <a href="javascript:" data-members-signout>Sign out</a></p>
        {{/if}}
    </div>
{{/if}}

<script>
    const Cove = {
        contentId: "{{id}}",
        memberId: "{{@member.uuid}}",
        memberEmail: "{{@member.email}}",
        memberName: "{{@member.firstname}}"
    };
</script>

<script>
  (function(){
    var coveElement = document.getElementById("cove");
    var containerElement = document.querySelector(".comment");
    
    if (!coveElement || !containerElement || !window.MutationObserver) {
        return;
    }

    // Listen to when Cove elements are appended to DOM
    const observer = new MutationObserver(function(mutationsList, observer) {
        for(const mutation of mutationsList) {
            if (mutation.type === 'childList') {

              // Fix "Powered By" element
              var covePoweredBy = document.querySelector("#cove + div");
              if (covePoweredBy && covePoweredBy.textContent && covePoweredBy.textContent.trim().toLowerCase() === "powered by cove") {
                covePoweredBy.classList.add('cove-powered-by');
              }              


              // Fix "Signed in as" element
              var formElement = coveElement.querySelector("#cove-form");

              if (formElement) {

                setTimeout(function() {
                  var coveSignedIn = document.querySelector(".cove-signed-in");
                  if (coveSignedIn && covePoweredBy) {
                    coveSignedIn.appendChild(covePoweredBy);
                  }
                }, 100);

                observer.disconnect();
              }
            }
        }
    });

    observer.observe(containerElement, { childList: true }); 
 
  })();
</script>